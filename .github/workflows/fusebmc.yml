- name: Run FuSeBMC on changed C files
      id: fusebmc-analysis
      run: |
        echo "# FuSeBMC Analysis Results" > results.md
        vulnerabilities_found=false
        for file in ${{ steps.changed-files.outputs.files }}; do
          if [ -f "$file" ]; then
            echo "Processing file: $file"
            
            # Run FuSeBMC and capture the output
            output=$(docker run --rm \
              -v ${{ github.workspace }}:/workspace \
              ghcr.io/fusebmc/fusebmc-ai:run-ESBMC-individual-property \
              --ai --ESBMC_Multirun --verification -s incr -a 64 /workspace/$file)
            
            echo "$output"
            
            # Extract output directory suffix
            file_name=$(basename "$file")
            output_dir_suffix=$(echo "$output" | grep -oP "fusebmc_output/${file_name}_\w+")
            echo "Output directory suffix: $output_dir_suffix"
            
            if [ -z "$output_dir_suffix" ]; then
              echo "Error: Could not extract output directory suffix"
              continue
            fi
            
            # Access Docker image in bash mode and fetch files
            docker run --rm -v ${{ github.workspace }}:/workspace --entrypoint /bin/bash ghcr.io/fusebmc/fusebmc-ai:run-ESBMC-individual-property -c "
              if [ -f /home/varun/Desktop/FuSeBMC-AI/release/$output_dir_suffix/solution/correct.c ]; then
                cp /home/varun/Desktop/FuSeBMC-AI/release/$output_dir_suffix/solution/correct.c /workspace/correct_$file
              else
                echo 'Corrected file not found'
              fi
              if [ -d /home/varun/Desktop/FuSeBMC-AI/release/$output_dir_suffix/fusebmc_instrument_output ]; then
                cp /home/varun/Desktop/FuSeBMC-AI/release/$output_dir_suffix/fusebmc_instrument_output/*.graphml /workspace/ || echo 'No GraphML files found'
              else
                echo 'fusebmc_instrument_output directory not found'
              fi
            "
            
            echo "## $file" >> results.md
            echo "### Bug Summary" >> results.md
            echo "" >> results.md
            echo "#### Detected Issues:" >> results.md
            
            # Analyze GraphML files for violation witnesses
            violation_found=false
            violations=()
            for graphml in *.graphml; do
              if [ -f "$graphml" ] && [[ $graphml != "veri_1.graphml" && $graphml != "veri_2.graphml" ]]; then
                if grep -q "violation" "$graphml"; then
                  violation_found=true
                  line_number=$(grep -oP 'line="\K\d+' "$graphml" | head -1)
                  violations+=("- Line $line_number: Violation detected")
                fi
              fi
            done
            
            if $violation_found; then
              printf '%s\n' "${violations[@]}" >> results.md
              vulnerabilities_found=true
            else
              echo "- No violations detected" >> results.md
            fi
            
            echo "" >> results.md
            echo "#### Annotated Source Code:" >> results.md
            echo "" >> results.md
            echo '```c' >> results.md
            
            # Read the file line by line and add annotations
            line_number=1
            while IFS= read -r line; do
              echo "$line" >> results.md
              if [[ " ${violations[@]} " =~ " Line $line_number: " ]]; then
                echo "  <!-- Violation detected -->" >> results.md
              fi
              ((line_number++))
            done < "$file"
            
            echo '```' >> results.md
            echo "" >> results.md
            
            echo "#### Corrected Code:" >> results.md
            echo "" >> results.md
            echo '```c' >> results.md
            if [ -f "correct_$file" ]; then
              cat "correct_$file" >> results.md
            else
              echo "Corrected code not available" >> results.md
            fi
            echo '```' >> results.md
            echo "" >> results.md
            
            # Replace the original file with the corrected code if it exists
            if [ -f "correct_$file" ]; then
              mv "correct_$file" "$file"
            fi
          fi
        done
        echo "vulnerabilities_found=$vulnerabilities_found" >> $GITHUB_OUTPUT
