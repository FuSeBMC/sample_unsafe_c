name: FuSeBMC Analysis

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.MY_GITHUB_PAT }}

    - name: Pull FuSeBMC Docker image
      run: docker pull ghcr.io/fusebmc/fusebmc-ai:build_system

    - name: Run privileged command
      run: |
        sudo sh -c 'echo core > /proc/sys/kernel/core_pattern'

    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          git fetch origin ${{ github.base_ref }}
          changed_files=$(git diff --name-only --diff-filter=ACMRT origin/${{ github.base_ref }} ${{ github.sha }} | grep -E '\.c$|\.i$' || true)
        elif [ "${{ github.event_name }}" == "push" ]; then
          if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
            changed_files=$(git diff --name-only --diff-filter=ACMRT HEAD^1 HEAD | grep -E '\.c$|\.i$' || true)
          else
            changed_files=$(git ls-tree -r --name-only HEAD | grep -E '\.c$|\.i$' || true)
          fi
        else
          changed_files=$(git ls-tree -r --name-only HEAD | grep -E '\.c$|\.i$' || true)
        fi
        echo "Changed files: $changed_files"
        echo "files=$changed_files" >> $GITHUB_OUTPUT

    - name: Run FuSeBMC on changed C files
      id: fusebmc-analysis
      run: |
        echo "## FuSeBMC Analysis Results" > results.md
        echo "### Summary" >> results.md
        echo "| File | Status |" >> results.md
        echo "|------|--------|" >> results.md
        vulnerabilities_found=false
        for file in ${{ steps.changed-files.outputs.files }}; do
          if [ -f "$file" ]; then
            echo "Processing file: $file"
            output=$(docker run --rm \
              -v ${{ github.workspace }}:/workspace \
              ghcr.io/fusebmc/fusebmc-ai:build_system \
              --ai --verification -a 64 -s incr /workspace/$file)

            # Extract the output directory suffix from the logs
            file_base=$(basename "$file")
            output_suffix=$(echo "$output" | grep -oP "(?<=fusebmc_output/${file_base}_)[^/]+")

            if [ -z "$output_suffix" ]; then
              echo "Could not find the output directory suffix in the logs."
              exit 1
            fi

            output_dir="fusebmc_output/${file_base}_${output_suffix}"
            solution_file="$output_dir/solution/correct.c"

            # Extract corrected code
            docker cp $(docker ps -lq):/workspace/$solution_file ./corrected_code/$file_base
            if [ -f "./corrected_code/$file_base" ]; then
              corrected_code=$(cat "./corrected_code/$file_base")
              echo "| $file | ❌ Failed |" >> results.md
              vulnerabilities_found=true
              
              echo "" >> results.md
              echo "### $file" >> results.md
              echo "#### Corrected Code:" >> results.md
              echo '```c' >> results.md
              echo "$corrected_code" >> results.md
              echo '```' >> results.md
              
              # Replace the original file with the corrected code
              echo "$corrected_code" > "$file"
            else
              echo "| $file | ✅ Passed |" >> results.md
            fi

            # Process graphml files for violation witnesses
            docker cp $(docker ps -lq):/workspace/$output_dir/fusebmc_instrument_output ./graphml_files
            for graphml_file in ./graphml_files/*.graphml; do
              if [[ $(basename "$graphml_file") != "veri_1.graphml" && $(basename "$graphml_file") != "veri_2.graphml" ]]; then
                if grep -q "<data key=\"violation\">" "$graphml_file"; then
                  echo "Violation found in $graphml_file"
                  echo "#### Violation Details from $graphml_file:" >> results.md
                  # Extract specific vulnerability details from graphml
                  line_number=$(xmllint --xpath 'string(//data[@key="startline"])' "$graphml_file")
                  description=$(xmllint --xpath 'string(//data[@key="description"])' "$graphml_file")
                  echo "- Line $line_number: $description" >> results.md

                  # Pinpoint the exact part of the code
                  code_snippet=$(awk "NR==$line_number{print;exit}" $file)
                  echo '```c' >> results.md
                  echo "$code_snippet" >> results.md
                  echo '```' >> results.md
                  vulnerabilities_found=true
                fi
              fi
            done
            echo "" >> results.md
          fi
        done
        echo "vulnerabilities_found=$vulnerabilities_found" >> $GITHUB_OUTPUT

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: fusebmc-results
        path: results.md

    - name: Create Pull Request
      if: steps.fusebmc-analysis.outputs.vulnerabilities_found == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Apply FuSeBMC corrections
        title: '[FuSeBMC] Apply corrections'
        body: |
          This pull request applies corrections from FuSeBMC analysis.
          The corrected code has replaced the original code in the relevant files.
          
          Please review the changes carefully before merging.
        branch: fusebmc-corrections
        delete-branch: true
        base: ${{ github.ref_name }}

    - name: Fail if vulnerabilities found
      if: steps.fusebmc-analysis.outputs.vulnerabilities_found == 'true'
      run: |
        echo "Vulnerabilities were found. Pipeline failed."
        exit 1
